name: Stable Release Pipeline

on:
  push:
    branches:
      - main

jobs:
  stable-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'  # Adjust if needed

      - name: Get Current Version
        id: version
        run: |
          version=$(cat VERSION)
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Increment Version
        id: increment_version
        run: |
          old_version=${VERSION}
          new_version=$(echo $old_version | awk -F. '{$NF += 1; OFS="."; print $1, $2, $3}')
          echo "$new_version" > VERSION
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Commit New Version
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add VERSION
          git commit -m "Bump version to v${{ env.NEW_VERSION }}"
          git push

      - name: Build & Package CLI for Multiple OS
        run: |
          mkdir -p dist
          platforms=(
            "linux amd64"
            "darwin amd64"
            "darwin arm64"
            "windows amd64"
          )

          for platform in "${platforms[@]}"; do
            os=$(echo $platform | cut -d' ' -f1)
            arch=$(echo $platform | cut -d' ' -f2)
            output_name="grapple-${os}-${arch}"
            build_dir="build/${output_name}"

            mkdir -p "$build_dir"
            
            # Set executable name based on OS
            exe_name="grapple"
            if [ "$os" == "windows" ]; then
              exe_name="grapple.exe"
            fi
            
            # Build the binary
            GOOS=$os GOARCH=$arch go build -o "$build_dir/$exe_name" main.go

            # Copy required files
            cp -r template-files "$build_dir/"
            cp -r files "$build_dir/"

            # Package based on OS
            if [ "$os" == "windows" ]; then
              # Create zip for Windows
              (cd "build" && zip -r "../dist/${output_name}.zip" "${output_name}")
            else
              # Create tar.gz for Unix systems
              tar -czvf "dist/${output_name}.tar.gz" -C "build" "${output_name}"
            fi
          done

      - name: Create GitHub Release and Upload Assets
        run: |
          gh release create "${{ env.NEW_VERSION }}" \
            --title "${{ env.NEW_VERSION }}" \
            --notes "Automated release from main branch." \
            dist/*.tar.gz dist/*.zip
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}